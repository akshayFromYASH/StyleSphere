import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { Order } from 'src/app/Models/Order';
import { Payment } from 'src/app/Models/Payment';
import { Product } from 'src/app/Models/Product';
import { OrderService } from 'src/app/Services/order.service';
import { ProductService } from 'src/app/Services/product.service';
import { ShippingService } from 'src/app/Services/shipping.service';
import { PaymentService } from 'src/app/Services/payment.service'; // Import the PaymentService
import { Shipping_Details } from 'src/app/Models/Shpping_Details';

@Component({
  selector: 'app-productbuy',
  templateUrl: './productbuy.component.html',
  styleUrls: ['./productbuy.component.css']
})
export class ProductbuyComponent implements OnInit {
  product: Product;
  prodid: number;
  orderid: number;
  shippingDetails: Shipping_Details = new Shipping_Details();
  payment: Payment = new Payment(); // Initialize the payment object

  constructor(
    private _product: ProductService,
    private _order: OrderService,
    private _shipping: ShippingService,
    private _payment: PaymentService, // Add the PaymentService
    private router: Router,
    private activateRoute: ActivatedRoute
  ) {}

  ngOnInit() {
    this.prodid = parseInt(this.activateRoute.snapshot.paramMap.get('prodid') || '0', 10);
    console.log(this.prodid);

    this._product.getProductById(this.prodid).subscribe(data => {
      this.product = data;
      console.log(this.product);

      // Initialize payment details after product is loaded
      this.payment = {
        paymentId: 0, // Auto-generated by the database
        orderDate: new Date().toISOString().split('T')[0],
        delieveryDate: this.calculateDeliveryDate(),
        orderId: this.orderid,
        total_Amount: this.product.price,
        shipping_Amount: 50, // Example shipping cost
        discount_Amount: 0, // Example discount
        net_Amount: this.product.price + 50, // Price + shipping cost
        payment_Status: 'paid',
        payment_Method: 'razorpay',
        prodId: this.product.prodId
      };
    });

    this.shippingDetails.userId = parseInt(sessionStorage.getItem('userid')?.toString() || '0', 10);
  }

  calculateDeliveryDate(): string {
    const deliveryDate = new Date();
    deliveryDate.setDate(deliveryDate.getDate() + 7);
    return deliveryDate.toISOString().split('T')[0];
  }

  orderNow() {
    this.order().then(() => this.pay()).then(() => this.ship());
  }

  pay(): Promise<void> {
    return new Promise((resolve, reject) => {
      this._payment.makePayment(this.payment).subscribe(
        paymentResponse => {
          console.log('Payment successful', paymentResponse);
          alert('Payment successful!');
          resolve();
        },
        paymentError => {
          console.error('Payment error:', paymentError);
          alert('Payment failed. Please try again.');
          reject(paymentError);
        }
      );
    });
  }

  order(): Promise<void> {
    return new Promise((resolve, reject) => {
      var order: Order = {
        orderId: 0, // Auto-generated by the database
        orderNumber: (1000 + Math.random() * 900000).toString(),
        total_Amount: this.product.price,
        shipping_Amount: 50, // Example shipping cost
        discount_Amount: 0, // Example discount
        net_Amount: this.product.price + 50, // Price + shipping cost
        status: 'placed',
        return_Reason: '',
        prodId: this.prodid
      };

      this._order.addOrder(order).subscribe(
        data => {
          console.log('Order placed successfully:', data);
          this.orderid = data.orderId; // Set the orderId in payment details
          this.payment.orderId = data.orderId;
          this.shippingDetails.orderId = data.orderId;
          resolve();
        },
        orderError => {
          console.error('Error placing order:', orderError);
          alert('Failed to place order. Please try again.');
          reject(orderError);
        }
      );
    });
  }

  ship(): Promise<void> {
    return new Promise((resolve, reject) => {
      this.shippingDetails = {
        shippingId: 0,
        shippingTo: this.shippingDetails.shippingTo,
        orderId: this.orderid,
        contactDetails: this.shippingDetails.contactDetails,
        address: this.shippingDetails.address,
        userId: parseInt(sessionStorage.getItem('userid')?.toString() || '0', 10),
        prodId: this.prodid
      };

      this._shipping.addShippingDetails(this.shippingDetails).subscribe(
        response => {
          console.log('Shipping details added successfully:', response);
          alert('Shipping details added successfully!');
          this.router.navigate(['/order-confirmation']);
          resolve();
        },
        error => {
          console.error('Error adding shipping details:', error);
          alert('Failed to add shipping details. Please try again.');
          reject(error);
        }
      );
    });
  }
}
