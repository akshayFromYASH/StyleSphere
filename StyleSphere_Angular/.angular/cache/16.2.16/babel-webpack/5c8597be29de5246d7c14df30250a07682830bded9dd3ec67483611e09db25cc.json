{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class CartService {\n  constructor(http, activeRoute) {\n    this.http = http;\n    this.activeRoute = activeRoute;\n    this.apiUrl = 'http://localhost:5145/Cart';\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-type': 'application/json'\n      })\n    };\n  }\n  AddProduct(cart) {\n    console.log(\"product :\" + cart);\n    return this.http.post(this.apiUrl, cart, this.httpOptions).pipe(catchError(this.handleError));\n  }\n  getAllProducts() {\n    return this.http.get(this.apiUrl);\n  }\n  getProductById(id) {\n    return this.http.get(this.apiUrl + \"/\" + {\n      id\n    });\n  }\n  getProductsByUserId(userid) {\n    return this.http.get(`${this.apiUrl}/GetProductsByUserId/${userid}`);\n  }\n  UpdateProduct(id, product) {\n    return this.http.put(this.apiUrl + \"/\" + id, product, this.httpOptions).pipe(catchError(this.handleError));\n  }\n  delete(id) {\n    return this.http.delete(this.apiUrl + \"/\" + id);\n  }\n  handleError(error) {\n    let errorMessage = \"\";\n    errorMessage = error.status + '\\n' + error.statusText + '\\n' + error.error;\n    alert(errorMessage);\n    return throwError(errorMessage);\n  }\n  static {\n    this.ɵfac = function CartService_Factory(t) {\n      return new (t || CartService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ActivatedRoute));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CartService,\n      factory: CartService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","catchError","throwError","CartService","constructor","http","activeRoute","apiUrl","httpOptions","headers","AddProduct","cart","console","log","post","pipe","handleError","getAllProducts","get","getProductById","id","getProductsByUserId","userid","UpdateProduct","product","put","delete","error","errorMessage","status","statusText","alert","i0","ɵɵinject","i1","HttpClient","i2","ActivatedRoute","factory","ɵfac","providedIn"],"sources":["D:\\StyleShpere\\StyleSphere_Angular\\src\\app\\Services\\cart.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Cart } from '../Models/Cart';\nimport { catchError, Observable, throwError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n  apiUrl: string = 'http://localhost:5145/Cart';\n  userid: number;\n\n  httpOptions = { headers: new HttpHeaders({ 'Content-type': 'application/json' }) };\n\n  constructor(private http: HttpClient, private activeRoute: ActivatedRoute) { }\n\n  AddProduct(cart: Cart): Observable<any> {\n    console.log(\"product :\" + cart);\n    return this.http.post<any>(this.apiUrl, cart, this.httpOptions).pipe(catchError(this.handleError));\n  }\n\n  getAllProducts(): Observable<any> {\n    return this.http.get<Cart>(this.apiUrl);\n  }\n\n  getProductById(id: number): Observable<any> {\n    return this.http.get<any>(this.apiUrl + \"/\" + { id });\n  }\n\n  getProductsByUserId(userid: number): Observable<Cart[]> { \n    return this.http.get<Cart[]>(`${this.apiUrl}/GetProductsByUserId/${userid}`); \n  }\n\n  UpdateProduct(id: number, product: Cart): Observable<Cart> {\n    return this.http.put<Cart>(this.apiUrl + \"/\" + id, product, this.httpOptions).pipe(catchError(this.handleError))\n  }\n\n  delete(id: number): Observable<any> {\n    return this.http.delete(this.apiUrl + \"/\" + id);\n  }\n\n  handleError(error: HttpErrorResponse) {\n    let errorMessage = \"\";\n    errorMessage = error.status + '\\n' + error.statusText + '\\n' + error.error;\n    alert(errorMessage);\n    return throwError(errorMessage);\n  }\n\n}\n"],"mappings":"AAAA,SAAwCA,WAAW,QAAQ,sBAAsB;AAIjF,SAASC,UAAU,EAAcC,UAAU,QAAQ,MAAM;;;;AAKzD,OAAM,MAAOC,WAAW;EAMtBC,YAAoBC,IAAgB,EAAUC,WAA2B;IAArD,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,WAAW,GAAXA,WAAW;IALzD,KAAAC,MAAM,GAAW,4BAA4B;IAG7C,KAAAC,WAAW,GAAG;MAAEC,OAAO,EAAE,IAAIT,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;IAAC,CAAE;EAEL;EAE7EU,UAAUA,CAACC,IAAU;IACnBC,OAAO,CAACC,GAAG,CAAC,WAAW,GAAGF,IAAI,CAAC;IAC/B,OAAO,IAAI,CAACN,IAAI,CAACS,IAAI,CAAM,IAAI,CAACP,MAAM,EAAEI,IAAI,EAAE,IAAI,CAACH,WAAW,CAAC,CAACO,IAAI,CAACd,UAAU,CAAC,IAAI,CAACe,WAAW,CAAC,CAAC;EACpG;EAEAC,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACZ,IAAI,CAACa,GAAG,CAAO,IAAI,CAACX,MAAM,CAAC;EACzC;EAEAY,cAAcA,CAACC,EAAU;IACvB,OAAO,IAAI,CAACf,IAAI,CAACa,GAAG,CAAM,IAAI,CAACX,MAAM,GAAG,GAAG,GAAG;MAAEa;IAAE,CAAE,CAAC;EACvD;EAEAC,mBAAmBA,CAACC,MAAc;IAChC,OAAO,IAAI,CAACjB,IAAI,CAACa,GAAG,CAAS,GAAG,IAAI,CAACX,MAAM,wBAAwBe,MAAM,EAAE,CAAC;EAC9E;EAEAC,aAAaA,CAACH,EAAU,EAAEI,OAAa;IACrC,OAAO,IAAI,CAACnB,IAAI,CAACoB,GAAG,CAAO,IAAI,CAAClB,MAAM,GAAG,GAAG,GAAGa,EAAE,EAAEI,OAAO,EAAE,IAAI,CAAChB,WAAW,CAAC,CAACO,IAAI,CAACd,UAAU,CAAC,IAAI,CAACe,WAAW,CAAC,CAAC;EAClH;EAEAU,MAAMA,CAACN,EAAU;IACf,OAAO,IAAI,CAACf,IAAI,CAACqB,MAAM,CAAC,IAAI,CAACnB,MAAM,GAAG,GAAG,GAAGa,EAAE,CAAC;EACjD;EAEAJ,WAAWA,CAACW,KAAwB;IAClC,IAAIC,YAAY,GAAG,EAAE;IACrBA,YAAY,GAAGD,KAAK,CAACE,MAAM,GAAG,IAAI,GAAGF,KAAK,CAACG,UAAU,GAAG,IAAI,GAAGH,KAAK,CAACA,KAAK;IAC1EI,KAAK,CAACH,YAAY,CAAC;IACnB,OAAO1B,UAAU,CAAC0B,YAAY,CAAC;EACjC;;;uBAtCWzB,WAAW,EAAA6B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,cAAA;IAAA;EAAA;;;aAAXlC,WAAW;MAAAmC,OAAA,EAAXnC,WAAW,CAAAoC,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}