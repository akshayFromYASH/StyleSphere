{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let NavbarComponent = class NavbarComponent {\n  constructor(service, router) {\n    this.service = service;\n    this.router = router;\n    this.title = 'StyleSphere_Angular';\n    this.role = '';\n    this.loggedIn = false;\n  }\n  ngOnInit() {\n    this.updateLoginStatus();\n    // Listen to changes in sessionStorage and localStorage\n    window.addEventListener('storage', () => {\n      this.updateLoginStatus();\n    });\n  }\n  updateLoginStatus() {\n    this.role = sessionStorage.getItem(\"userrole\");\n    this.loggedIn = localStorage.getItem(\"logged\") === 'true';\n  }\n  logout() {\n    sessionStorage.removeItem(\"userrole\");\n    sessionStorage.removeItem(\"loginToken\");\n    localStorage.removeItem(\"logged\");\n    this.updateLoginStatus();\n    this.router.navigate(['userLogin']);\n  }\n};\nNavbarComponent = __decorate([Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})], NavbarComponent);","map":{"version":3,"names":["Component","NavbarComponent","constructor","service","router","title","role","loggedIn","ngOnInit","updateLoginStatus","window","addEventListener","sessionStorage","getItem","localStorage","logout","removeItem","navigate","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\StyleShpere\\StyleSphere_Angular\\src\\app\\navbar\\navbar.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { UserService } from '../Services/user.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent {\n  title = 'StyleSphere_Angular';\n  role: string | null = '';\n  loggedIn: boolean = false;\n\n  constructor(private service: UserService, private router: Router) {}\n\n  ngOnInit(): void {\n    this.updateLoginStatus();\n\n    // Listen to changes in sessionStorage and localStorage\n    window.addEventListener('storage', () => {\n      this.updateLoginStatus();\n    });\n  }\n\n  updateLoginStatus(): void {\n    this.role = sessionStorage.getItem(\"userrole\");\n    this.loggedIn = localStorage.getItem(\"logged\") === 'true';\n  }\n\n  logout(): void {\n    sessionStorage.removeItem(\"userrole\");\n    sessionStorage.removeItem(\"loginToken\");\n    localStorage.removeItem(\"logged\");\n    this.updateLoginStatus();\n    this.router.navigate(['userLogin']);\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AASlC,WAAMC,eAAe,GAArB,MAAMA,eAAe;EAK1BC,YAAoBC,OAAoB,EAAUC,MAAc;IAA5C,KAAAD,OAAO,GAAPA,OAAO;IAAuB,KAAAC,MAAM,GAANA,MAAM;IAJxD,KAAAC,KAAK,GAAG,qBAAqB;IAC7B,KAAAC,IAAI,GAAkB,EAAE;IACxB,KAAAC,QAAQ,GAAY,KAAK;EAE0C;EAEnEC,QAAQA,CAAA;IACN,IAAI,CAACC,iBAAiB,EAAE;IAExB;IACAC,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAE,MAAK;MACtC,IAAI,CAACF,iBAAiB,EAAE;IAC1B,CAAC,CAAC;EACJ;EAEAA,iBAAiBA,CAAA;IACf,IAAI,CAACH,IAAI,GAAGM,cAAc,CAACC,OAAO,CAAC,UAAU,CAAC;IAC9C,IAAI,CAACN,QAAQ,GAAGO,YAAY,CAACD,OAAO,CAAC,QAAQ,CAAC,KAAK,MAAM;EAC3D;EAEAE,MAAMA,CAAA;IACJH,cAAc,CAACI,UAAU,CAAC,UAAU,CAAC;IACrCJ,cAAc,CAACI,UAAU,CAAC,YAAY,CAAC;IACvCF,YAAY,CAACE,UAAU,CAAC,QAAQ,CAAC;IACjC,IAAI,CAACP,iBAAiB,EAAE;IACxB,IAAI,CAACL,MAAM,CAACa,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC;EACrC;CACD;AA5BYhB,eAAe,GAAAiB,UAAA,EAL3BlB,SAAS,CAAC;EACTmB,QAAQ,EAAE,YAAY;EACtBC,WAAW,EAAE,yBAAyB;EACtCC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,C,EACWpB,eAAe,CA4B3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}