{"ast":null,"code":"import * as i0 from \"@angular/core\";\n// Interceptor ==> - Tools for handling and manipulating HTTP requests and responses.\n// - They allow you to define custom logic that can be executed before the request is sent to the server or after the response is received.\nexport class AuthInterceptor {\n  constructor() {}\n  // intercept method is called for every HTTP request.\n  intercept(request, next) {\n    const token = sessionStorage.getItem('loginToken'); // Get JWT from sessionStorage\n    // request object is immutable hence we create clone it to modify it\n    if (token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    return next.handle(request); // passing cloned request with token to the next handler\n  }\n\n  static {\n    this.ɵfac = function AuthInterceptor_Factory(t) {\n      return new (t || AuthInterceptor)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthInterceptor,\n      factory: AuthInterceptor.ɵfac\n    });\n  }\n}","map":{"version":3,"names":["AuthInterceptor","constructor","intercept","request","next","token","sessionStorage","getItem","clone","setHeaders","Authorization","handle","factory","ɵfac"],"sources":["D:\\StyleShpere\\StyleSphere_Angular\\src\\app\\auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\n\n// Interceptor ==> - Tools for handling and manipulating HTTP requests and responses.\n                // - They allow you to define custom logic that can be executed before the request is sent to the server or after the response is received.\nexport class AuthInterceptor implements HttpInterceptor {\n\n  constructor() {}\n\n  // intercept method is called for every HTTP request.\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    \n    const token = sessionStorage.getItem('loginToken');       // Get JWT from sessionStorage\n\n    // request object is immutable hence we create clone it to modify it\n    if(token){\n      request = request.clone({\n        setHeaders:{Authorization:`Bearer ${token}`}\n      })\n    }\n    return next.handle(request);    // passing cloned request with token to the next handler\n  }\n}\n"],"mappings":";AAWA;AACgB;AAChB,OAAM,MAAOA,eAAe;EAE1BC,YAAA,GAAe;EAEf;EACAC,SAASA,CAACC,OAAyB,EAAEC,IAAiB;IAEpD,MAAMC,KAAK,GAAGC,cAAc,CAACC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAO;IAE1D;IACA,IAAGF,KAAK,EAAC;MACPF,OAAO,GAAGA,OAAO,CAACK,KAAK,CAAC;QACtBC,UAAU,EAAC;UAACC,aAAa,EAAC,UAAUL,KAAK;QAAE;OAC5C,CAAC;;IAEJ,OAAOD,IAAI,CAACO,MAAM,CAACR,OAAO,CAAC,CAAC,CAAI;EAClC;;;;uBAhBWH,eAAe;IAAA;EAAA;;;aAAfA,eAAe;MAAAY,OAAA,EAAfZ,eAAe,CAAAa;IAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}