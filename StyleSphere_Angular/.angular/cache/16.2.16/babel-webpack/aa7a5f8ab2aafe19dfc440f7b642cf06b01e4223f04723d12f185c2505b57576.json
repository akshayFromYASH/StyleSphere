{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class OrderService {\n  constructor(http, activeRoute) {\n    this.http = http;\n    this.activeRoute = activeRoute;\n    this.apiUrl = 'http://localhost:5145/Order'; // Ensure the API path is correct\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-type': 'application/json'\n      })\n    };\n  }\n  // Add Order\n  addOrder(order) {\n    console.log(\"Order: \" + JSON.stringify(order));\n    return this.http.post(this.apiUrl, order, this.httpOptions).pipe(catchError(this.handleError));\n  }\n  // Get All Orders\n  getAllOrders() {\n    return this.http.get(this.apiUrl).pipe(catchError(this.handleError));\n  }\n  // Get Order By ID\n  getOrderById(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(catchError(this.handleError));\n  }\n  // Get Orders By User ID\n  getOrdersByUserId(userid) {\n    return this.http.get(`${this.apiUrl}/GetOrdersByUserId/${userid}`).pipe(catchError(this.handleError));\n  }\n  // Update Order\n  updateOrder(id, order) {\n    return this.http.put(`${this.apiUrl}/${id}`, order, this.httpOptions).pipe(catchError(this.handleError));\n  }\n  // Delete Order\n  deleteOrder(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(catchError(this.handleError));\n  }\n  // Error Handling\n  handleError(error) {\n    let errorMessage;\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Client-side error: ${error.error.message}`;\n    } else {\n      // Server-side error\n      errorMessage = `Server-side error: ${error.status}\\nMessage: ${error.message}`;\n    }\n    console.error(errorMessage);\n    alert(errorMessage);\n    return throwError(() => new Error(errorMessage));\n  }\n  static {\n    this.ɵfac = function OrderService_Factory(t) {\n      return new (t || OrderService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ActivatedRoute));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: OrderService,\n      factory: OrderService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","catchError","throwError","OrderService","constructor","http","activeRoute","apiUrl","httpOptions","headers","addOrder","order","console","log","JSON","stringify","post","pipe","handleError","getAllOrders","get","getOrderById","id","getOrdersByUserId","userid","updateOrder","put","deleteOrder","delete","error","errorMessage","ErrorEvent","message","status","alert","Error","i0","ɵɵinject","i1","HttpClient","i2","ActivatedRoute","factory","ɵfac","providedIn"],"sources":["D:\\StyleShpere\\StyleSphere_Angular\\src\\app\\Services\\order.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Order } from '../Models/Order';\nimport { catchError, Observable, throwError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderService {\n  apiUrl: string = 'http://localhost:5145/Order'; // Ensure the API path is correct\n  httpOptions = { headers: new HttpHeaders({ 'Content-type': 'application/json' }) };\n\n  constructor(private http: HttpClient, private activeRoute: ActivatedRoute) { }\n\n  // Add Order\n  addOrder(order: Order): Observable<any> {\n    console.log(\"Order: \" + JSON.stringify(order));\n    return this.http.post<any>(this.apiUrl, order, this.httpOptions)\n      .pipe(catchError(this.handleError));\n  }\n\n  // Get All Orders\n  getAllOrders(): Observable<Order[]> {\n    return this.http.get<Order[]>(this.apiUrl)\n      .pipe(catchError(this.handleError));\n  }\n\n  // Get Order By ID\n  getOrderById(id: number): Observable<Order> {\n    return this.http.get<Order>(`${this.apiUrl}/${id}`)\n      .pipe(catchError(this.handleError));\n  }\n\n  // Get Orders By User ID\n  getOrdersByUserId(userid: number): Observable<Order[]> {\n    return this.http.get<Order[]>(`${this.apiUrl}/GetOrdersByUserId/${userid}`)\n      .pipe(catchError(this.handleError));\n  }\n\n  // Update Order\n  updateOrder(id: number, order: Order): Observable<Order> {\n    return this.http.put<Order>(`${this.apiUrl}/${id}`, order, this.httpOptions)\n      .pipe(catchError(this.handleError));\n  }\n\n  // Delete Order\n  deleteOrder(id: number): Observable<any> {\n    return this.http.delete<any>(`${this.apiUrl}/${id}`)\n      .pipe(catchError(this.handleError));\n  }\n\n  // Error Handling\n  private handleError(error: HttpErrorResponse): Observable<never> {\n    let errorMessage: string;\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Client-side error: ${error.error.message}`;\n    } else {\n      // Server-side error\n      errorMessage = `Server-side error: ${error.status}\\nMessage: ${error.message}`;\n    }\n    console.error(errorMessage);\n    alert(errorMessage);\n    return throwError(() => new Error(errorMessage));\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}