{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class OrderService {\n  constructor(http, activeRoute) {\n    this.http = http;\n    this.activeRoute = activeRoute;\n    this.apiUrl = 'http://localhost:5145/Order';\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-type': 'application/json'\n      })\n    };\n  }\n  addOrder(order) {\n    console.log(\"Order: \" + JSON.stringify(order));\n    return this.http.post(this.apiUrl, order, this.httpOptions).pipe(catchError(this.handleError));\n  }\n  getAllOrders() {\n    return this.http.get(this.apiUrl).pipe(catchError(this.handleError));\n  }\n  getOrderById(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(catchError(this.handleError));\n  }\n  getOrdersByUserId(userid) {\n    return this.http.get(`${this.apiUrl}/GetOrdersByUserId/${userid}`).pipe(catchError(this.handleError));\n  }\n  updateOrder(id, order) {\n    return this.http.put(`${this.apiUrl}/${id}`, order, this.httpOptions).pipe(catchError(this.handleError));\n  }\n  deleteOrder(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    let errorMessage = '';\n    errorMessage = error.status + '\\n' + error.statusText + '\\n' + error.error;\n    alert(errorMessage);\n    return throwError(errorMessage);\n  }\n  static {\n    this.ɵfac = function OrderService_Factory(t) {\n      return new (t || OrderService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ActivatedRoute));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: OrderService,\n      factory: OrderService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","catchError","throwError","OrderService","constructor","http","activeRoute","apiUrl","httpOptions","headers","addOrder","order","console","log","JSON","stringify","post","pipe","handleError","getAllOrders","get","getOrderById","id","getOrdersByUserId","userid","updateOrder","put","deleteOrder","delete","error","errorMessage","status","statusText","alert","i0","ɵɵinject","i1","HttpClient","i2","ActivatedRoute","factory","ɵfac","providedIn"],"sources":["D:\\StyleShpere\\StyleSphere_Angular\\src\\app\\Services\\order.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Order } from '../Models/Order';\nimport { catchError, Observable, throwError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderService {\n  apiUrl: string = 'http://localhost:5145/Order';\n  order: Order;\n\n  httpOptions = { headers: new HttpHeaders({ 'Content-type': 'application/json' }) };\n\n  constructor(private http: HttpClient, private activeRoute: ActivatedRoute) { }\n\n  addOrder(order: Order): Observable<any> { \n    console.log(\"Order: \" + JSON.stringify(order)); \n    return this.http.post<any>(this.apiUrl, order, this.httpOptions).pipe(catchError(this.handleError)); \n  } \n  \n  getAllOrders(): Observable<Order[]> { \n    return this.http.get<Order[]>(this.apiUrl).pipe(catchError(this.handleError)); \n  } \n  getOrderById(id: number): Observable<Order> { \n    return this.http.get<Order>(`${this.apiUrl}/${id}`).pipe(catchError(this.handleError)); \n  } \n  \n  getOrdersByUserId(userid: number): Observable<Order[]> { \n    return this.http.get<Order[]>(`${this.apiUrl}/GetOrdersByUserId/${userid}`).pipe(catchError(this.handleError)); \n  } \n  \n  updateOrder(id: number, order: Order): Observable<Order> { \n    return this.http.put<Order>(`${this.apiUrl}/${id}`, order, this.httpOptions).pipe(catchError(this.handleError)); \n  } \n  \n  deleteOrder(id: number): Observable<any> { \n    return this.http.delete<any>(`${this.apiUrl}/${id}`).pipe(catchError(this.handleError)); \n  } \n  \n  private handleError(error: HttpErrorResponse) { \n    let errorMessage = ''; \n    errorMessage = error.status + '\\n' + error.statusText + '\\n' + error.error; \n    alert(errorMessage); \n    return throwError(errorMessage); \n  }\n  \n}\n"],"mappings":"AAAA,SAAwCA,WAAW,QAAQ,sBAAsB;AAIjF,SAASC,UAAU,EAAcC,UAAU,QAAQ,MAAM;;;;AAKzD,OAAM,MAAOC,YAAY;EAMvBC,YAAoBC,IAAgB,EAAUC,WAA2B;IAArD,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,WAAW,GAAXA,WAAW;IALzD,KAAAC,MAAM,GAAW,6BAA6B;IAG9C,KAAAC,WAAW,GAAG;MAAEC,OAAO,EAAE,IAAIT,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;IAAC,CAAE;EAEL;EAE7EU,QAAQA,CAACC,KAAY;IACnBC,OAAO,CAACC,GAAG,CAAC,SAAS,GAAGC,IAAI,CAACC,SAAS,CAACJ,KAAK,CAAC,CAAC;IAC9C,OAAO,IAAI,CAACN,IAAI,CAACW,IAAI,CAAM,IAAI,CAACT,MAAM,EAAEI,KAAK,EAAE,IAAI,CAACH,WAAW,CAAC,CAACS,IAAI,CAAChB,UAAU,CAAC,IAAI,CAACiB,WAAW,CAAC,CAAC;EACrG;EAEAC,YAAYA,CAAA;IACV,OAAO,IAAI,CAACd,IAAI,CAACe,GAAG,CAAU,IAAI,CAACb,MAAM,CAAC,CAACU,IAAI,CAAChB,UAAU,CAAC,IAAI,CAACiB,WAAW,CAAC,CAAC;EAC/E;EACAG,YAAYA,CAACC,EAAU;IACrB,OAAO,IAAI,CAACjB,IAAI,CAACe,GAAG,CAAQ,GAAG,IAAI,CAACb,MAAM,IAAIe,EAAE,EAAE,CAAC,CAACL,IAAI,CAAChB,UAAU,CAAC,IAAI,CAACiB,WAAW,CAAC,CAAC;EACxF;EAEAK,iBAAiBA,CAACC,MAAc;IAC9B,OAAO,IAAI,CAACnB,IAAI,CAACe,GAAG,CAAU,GAAG,IAAI,CAACb,MAAM,sBAAsBiB,MAAM,EAAE,CAAC,CAACP,IAAI,CAAChB,UAAU,CAAC,IAAI,CAACiB,WAAW,CAAC,CAAC;EAChH;EAEAO,WAAWA,CAACH,EAAU,EAAEX,KAAY;IAClC,OAAO,IAAI,CAACN,IAAI,CAACqB,GAAG,CAAQ,GAAG,IAAI,CAACnB,MAAM,IAAIe,EAAE,EAAE,EAAEX,KAAK,EAAE,IAAI,CAACH,WAAW,CAAC,CAACS,IAAI,CAAChB,UAAU,CAAC,IAAI,CAACiB,WAAW,CAAC,CAAC;EACjH;EAEAS,WAAWA,CAACL,EAAU;IACpB,OAAO,IAAI,CAACjB,IAAI,CAACuB,MAAM,CAAM,GAAG,IAAI,CAACrB,MAAM,IAAIe,EAAE,EAAE,CAAC,CAACL,IAAI,CAAChB,UAAU,CAAC,IAAI,CAACiB,WAAW,CAAC,CAAC;EACzF;EAEQA,WAAWA,CAACW,KAAwB;IAC1C,IAAIC,YAAY,GAAG,EAAE;IACrBA,YAAY,GAAGD,KAAK,CAACE,MAAM,GAAG,IAAI,GAAGF,KAAK,CAACG,UAAU,GAAG,IAAI,GAAGH,KAAK,CAACA,KAAK;IAC1EI,KAAK,CAACH,YAAY,CAAC;IACnB,OAAO5B,UAAU,CAAC4B,YAAY,CAAC;EACjC;;;uBArCW3B,YAAY,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,cAAA;IAAA;EAAA;;;aAAZpC,YAAY;MAAAqC,OAAA,EAAZrC,YAAY,CAAAsC,IAAA;MAAAC,UAAA,EAFX;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}