{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class AuthInterceptor {\n  constructor() {}\n  intercept(request, next) {\n    const token = sessionStorage.getItem('loginToken'); // Get JWT from sessionStorage\n    if (token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    return next.handle(request); // Passing cloned request with token to the next handler\n  }\n\n  static {\n    this.ɵfac = function AuthInterceptor_Factory(t) {\n      return new (t || AuthInterceptor)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthInterceptor,\n      factory: AuthInterceptor.ɵfac\n    });\n  }\n}","map":{"version":3,"names":["AuthInterceptor","constructor","intercept","request","next","token","sessionStorage","getItem","clone","setHeaders","Authorization","handle","factory","ɵfac"],"sources":["D:\\StyleShpere\\StyleSphere_Angular\\src\\app\\auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  constructor() {}\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const token = sessionStorage.getItem('loginToken');  // Get JWT from sessionStorage\n\n    if (token) {\n      request = request.clone({\n        setHeaders: { Authorization: `Bearer ${token}` }\n      });\n    }\n    return next.handle(request);  // Passing cloned request with token to the next handler\n  }\n}\n"],"mappings":";AAKA,OAAM,MAAOA,eAAe;EAE1BC,YAAA,GAAe;EAEfC,SAASA,CAACC,OAAyB,EAAEC,IAAiB;IACpD,MAAMC,KAAK,GAAGC,cAAc,CAACC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAE;IAErD,IAAIF,KAAK,EAAE;MACTF,OAAO,GAAGA,OAAO,CAACK,KAAK,CAAC;QACtBC,UAAU,EAAE;UAAEC,aAAa,EAAE,UAAUL,KAAK;QAAE;OAC/C,CAAC;;IAEJ,OAAOD,IAAI,CAACO,MAAM,CAACR,OAAO,CAAC,CAAC,CAAE;EAChC;;;;uBAbWH,eAAe;IAAA;EAAA;;;aAAfA,eAAe;MAAAY,OAAA,EAAfZ,eAAe,CAAAa;IAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}