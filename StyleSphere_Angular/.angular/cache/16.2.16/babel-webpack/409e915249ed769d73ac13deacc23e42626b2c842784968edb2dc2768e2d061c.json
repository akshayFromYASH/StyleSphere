{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class XsrfInterceptor {\n  intercept(req, next) {\n    const token = sessionStorage.getItem('loginToken');\n    // Ensure token is not undefined before calling toLowerCase()\n    if (token) {\n      const clonedRequest = req.clone({\n        headers: req.headers.set('X-XSRF-TOKEN', token.toLowerCase())\n      });\n      return next.handle(clonedRequest);\n    }\n    return next.handle(req);\n  }\n  getXsrfToken() {\n    // Your logic to get XSRF token, ensure it never returns undefined\n    const tokenMatch = document.cookie.match(/XSRF-TOKEN=([^;]+)/);\n    return tokenMatch ? tokenMatch[1] : null;\n  }\n  static {\n    this.ɵfac = function XsrfInterceptor_Factory(t) {\n      return new (t || XsrfInterceptor)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: XsrfInterceptor,\n      factory: XsrfInterceptor.ɵfac\n    });\n  }\n}","map":{"version":3,"names":["XsrfInterceptor","intercept","req","next","token","sessionStorage","getItem","clonedRequest","clone","headers","set","toLowerCase","handle","getXsrfToken","tokenMatch","document","cookie","match","factory","ɵfac"],"sources":["D:\\StyleShpere\\StyleSphere_Angular\\src\\app\\xsrf.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class XsrfInterceptor implements HttpInterceptor {\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const token = sessionStorage.getItem('loginToken');\n\n    // Ensure token is not undefined before calling toLowerCase()\n    if (token) {\n      const clonedRequest = req.clone({\n        headers: req.headers.set('X-XSRF-TOKEN', token.toLowerCase())\n      });\n      return next.handle(clonedRequest);\n    }\n\n    return next.handle(req);\n  }\n\n  private getXsrfToken(): string | null {\n    // Your logic to get XSRF token, ensure it never returns undefined\n    const tokenMatch = document.cookie.match(/XSRF-TOKEN=([^;]+)/);\n    return tokenMatch ? tokenMatch[1] : null;\n  }\n}\n"],"mappings":";AAKA,OAAM,MAAOA,eAAe;EAE1BC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAChD,MAAMC,KAAK,GAAGC,cAAc,CAACC,OAAO,CAAC,YAAY,CAAC;IAElD;IACA,IAAIF,KAAK,EAAE;MACT,MAAMG,aAAa,GAAGL,GAAG,CAACM,KAAK,CAAC;QAC9BC,OAAO,EAAEP,GAAG,CAACO,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEN,KAAK,CAACO,WAAW,EAAE;OAC7D,CAAC;MACF,OAAOR,IAAI,CAACS,MAAM,CAACL,aAAa,CAAC;;IAGnC,OAAOJ,IAAI,CAACS,MAAM,CAACV,GAAG,CAAC;EACzB;EAEQW,YAAYA,CAAA;IAClB;IACA,MAAMC,UAAU,GAAGC,QAAQ,CAACC,MAAM,CAACC,KAAK,CAAC,oBAAoB,CAAC;IAC9D,OAAOH,UAAU,GAAGA,UAAU,CAAC,CAAC,CAAC,GAAG,IAAI;EAC1C;;;uBApBWd,eAAe;IAAA;EAAA;;;aAAfA,eAAe;MAAAkB,OAAA,EAAflB,eAAe,CAAAmB;IAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}