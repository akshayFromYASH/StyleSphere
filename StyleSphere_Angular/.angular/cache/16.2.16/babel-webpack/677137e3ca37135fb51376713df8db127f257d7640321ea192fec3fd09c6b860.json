{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../Services/user.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nexport class UserRegistrationComponent {\n  constructor(_service, Route) {\n    this._service = _service;\n    this.Route = Route;\n  }\n  // ngOnInit():void{\n  //   this.registrationForm = this.form.group({\n  //     userName: ['',[Validators.required,Validators.minLength(3)]],\n  //     email : ['',[Validators.required,Validators.email]],\n  //     password: ['',[Validators.required,Validators.minLength(6)]],\n  //     phoneNumber: ['',[Validators.required]],\n  //     status : ['active'],\n  //     userRole:['',[Validators.required]]\n  //   });\n  // }\n  onSubmit(form) {\n    console.log(this.registrationForm.value);\n    this.user = form;\n    if (this.registrationForm.valid) {\n      // user: this.registrationForm.value\n      if (this._service.UserRegistration(this.user).subscribe()) {\n        alert(\"User Registered Successfully\");\n        this.Route.navigate(['userLogin']);\n      } else {\n        alert(\"User Registration Failed\");\n      }\n    } else {\n      alert(\"Invalid user Information\");\n    }\n  }\n  static {\n    this.ɵfac = function UserRegistrationComponent_Factory(t) {\n      return new (t || UserRegistrationComponent)(i0.ɵɵdirectiveInject(i1.UserService), i0.ɵɵdirectiveInject(i2.Router));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: UserRegistrationComponent,\n      selectors: [[\"app-user-registration\"]],\n      decls: 36,\n      vars: 2,\n      consts: [[1, \"container\"], [3, \"formGroup\", \"ngSubmit\"], [\"user\", \"ngForm\"], [1, \"col\", \"text-center\", \"p-2\", \"mb-3\", \"bg-light\"], [1, \"form-group\"], [\"for\", \"userName\"], [\"type\", \"text\", \"id\", \"userName\", \"formControlName\", \"userName\", 1, \"form-control\"], [\"for\", \"email\"], [\"type\", \"email\", \"id\", \"email\", \"formControlName\", \"email\", 1, \"form-control\"], [\"for\", \"password\"], [\"type\", \"password\", \"id\", \"password\", \"formControlName\", \"password\", 1, \"form-control\"], [\"for\", \"phoneNumber\"], [\"type\", \"text\", \"id\", \"phoneNumber\", \"formControlName\", \"phoneNumber\", 1, \"form-control\"], [\"for\", \"status\"], [\"type\", \"text\", \"id\", \"status\", \"formControlName\", \"status\", \"readonly\", \"\", 1, \"form-control\"], [\"for\", \"userRole\"], [\"name\", \"userRole\", \"id\", \"userRole\", \"formControlName\", \"userRole\"], [\"value\", \"seller\"], [\"value\", \"customer\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"]],\n      template: function UserRegistrationComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          const _r1 = i0.ɵɵgetCurrentView();\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1, 2);\n          i0.ɵɵlistener(\"ngSubmit\", function UserRegistrationComponent_Template_form_ngSubmit_1_listener() {\n            i0.ɵɵrestoreView(_r1);\n            const _r0 = i0.ɵɵreference(2);\n            return i0.ɵɵresetView(ctx.onSubmit(_r0.value));\n          });\n          i0.ɵɵelementStart(3, \"div\", 3)(4, \"span\");\n          i0.ɵɵtext(5, \"User Registration\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(6, \"div\", 4)(7, \"label\", 5);\n          i0.ɵɵtext(8, \"Username:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(9, \"input\", 6);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(10, \"div\", 4)(11, \"label\", 7);\n          i0.ɵɵtext(12, \"Email:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(13, \"input\", 8);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(14, \"div\", 4)(15, \"label\", 9);\n          i0.ɵɵtext(16, \"Password:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(17, \"input\", 10);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(18, \"div\", 4)(19, \"label\", 11);\n          i0.ɵɵtext(20, \"Phone Number:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(21, \"input\", 12);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(22, \"div\", 4)(23, \"label\", 13);\n          i0.ɵɵtext(24, \"Status:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(25, \"input\", 14);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(26, \"div\", 4)(27, \"label\", 15);\n          i0.ɵɵtext(28, \"User Role:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(29, \"select\", 16)(30, \"option\", 17);\n          i0.ɵɵtext(31, \"Seller\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(32, \"option\", 18);\n          i0.ɵɵtext(33, \"Customer\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(34, \"button\", 19);\n          i0.ɵɵtext(35, \"Register\");\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"formGroup\", ctx.registrationForm);\n          i0.ɵɵadvance(33);\n          i0.ɵɵproperty(\"disabled\", ctx.registrationForm.invalid);\n        }\n      },\n      dependencies: [i3.ɵNgNoValidate, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.DefaultValueAccessor, i3.SelectControlValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName],\n      styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["UserRegistrationComponent","constructor","_service","Route","onSubmit","form","console","log","registrationForm","value","user","valid","UserRegistration","subscribe","alert","navigate","i0","ɵɵdirectiveInject","i1","UserService","i2","Router","selectors","decls","vars","consts","template","UserRegistrationComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","UserRegistrationComponent_Template_form_ngSubmit_1_listener","ɵɵrestoreView","_r1","_r0","ɵɵreference","ɵɵresetView","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵproperty","invalid"],"sources":["D:\\StyleShpere\\StyleSphere_Angular\\src\\app\\user-registration\\user-registration.component.ts","D:\\StyleShpere\\StyleSphere_Angular\\src\\app\\user-registration\\user-registration.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { User } from '../Models/User';\nimport { UserService } from '../Services/user.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-user-registration',\n  templateUrl: './user-registration.component.html',\n  styleUrls: ['./user-registration.component.css']\n})\nexport class UserRegistrationComponent {\n\n  user:User\n  registrationForm:FormGroup;\n  constructor(private _service:UserService,private Route:Router){}\n\n  // ngOnInit():void{\n  //   this.registrationForm = this.form.group({\n  //     userName: ['',[Validators.required,Validators.minLength(3)]],\n  //     email : ['',[Validators.required,Validators.email]],\n  //     password: ['',[Validators.required,Validators.minLength(6)]],\n  //     phoneNumber: ['',[Validators.required]],\n  //     status : ['active'],\n  //     userRole:['',[Validators.required]]\n  //   });\n  // }\n  \n  onSubmit(form:any):void{\n    console.log(this.registrationForm.value)\n    this.user=form;\n    if(this.registrationForm.valid){\n      // user: this.registrationForm.value\n      if(this._service.UserRegistration(this.user).subscribe()){\n        alert(\"User Registered Successfully\");\n        this.Route.navigate(['userLogin']);\n      }\n      else{\n        alert(\"User Registration Failed\")\n      } \n    }\n    else{\n      alert(\"Invalid user Information\");      \n    }\n  }\n}\n","<div class=\"container\">\n    <form #user=\"ngForm\" [formGroup]=\"registrationForm\" (ngSubmit)=\"onSubmit(user.value)\">\n      <div class=\"col text-center p-2 mb-3 bg-light\">\n        <span>User Registration</span>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"userName\">Username:</label>\n        <input type=\"text\" class=\"form-control\" id=\"userName\" formControlName=\"userName\" />\n        <!-- <div *ngIf=\"registrationForm.get('userName').invalid && (registrationForm.get('userName').dirty || registrationForm.get('userName').touched)\" class=\"alert alert-danger\">\n          Username is required.\n        </div> -->\n      </div>\n      <div class=\"form-group\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" class=\"form-control\" id=\"email\" formControlName=\"email\" />\n        <!-- <div *ngIf=\"registrationForm.get('email').invalid && (registrationForm.get('email').dirty || registrationForm.get('email').touched)\" class=\"alert alert-danger\">\n          <div *ngIf=\"registrationForm.get('email').errors.required\">Email is required.</div>\n          <div *ngIf=\"registrationForm.get('email').errors.email\">Invalid email format.</div>\n        </div> -->\n      </div>\n      <div class=\"form-group\">\n        <label for=\"password\">Password:</label>\n        <input type=\"password\" class=\"form-control\" id=\"password\" formControlName=\"password\" />\n        <!-- <div *ngIf=\"registrationForm.get('password').invalid && (registrationForm.get('password').dirty || registrationForm.get('password').touched)\" class=\"alert alert-danger\">\n          <div *ngIf=\"registrationForm.get('password').errors.required\">Password is required.</div>\n          <div *ngIf=\"registrationForm.get('password').errors.minlength\">Password must be at least 6 characters long.</div>\n        </div> -->\n      </div>\n      <div class=\"form-group\">\n        <label for=\"phoneNumber\">Phone Number:</label>\n        <input type=\"text\" class=\"form-control\" id=\"phoneNumber\" formControlName=\"phoneNumber\" />\n        <!-- <div *ngIf=\"registrationForm.get('phoneNumber').invalid && (registrationForm.get('phoneNumber').dirty || registrationForm.get('phoneNumber').touched)\" class=\"alert alert-danger\">\n          <div *ngIf=\"registrationForm.get('phoneNumber').errors.required\">Phone Number is required.</div>\n          <div *ngIf=\"registrationForm.get('phoneNumber').errors.pattern\">Invalid phone number format.</div>\n        </div> -->\n      </div>\n      <div class=\"form-group\">\n        <label for=\"status\">Status:</label>\n        <input type=\"text\" class=\"form-control\" id=\"status\" formControlName=\"status\" readonly/>\n        <!-- <div *ngIf=\"registrationForm.get('status').invalid && (registrationForm.get('status').dirty || registrationForm.get('status').touched)\" class=\"alert alert-danger\">\n          Status is required.\n        </div> -->\n      </div>\n      <div class=\"form-group\">\n        <label for=\"userRole\">User Role:</label>\n        <select name=\"userRole\" id=\"userRole\" formControlName=\"userRole\">\n          <option value=\"seller\">Seller</option>\n          <option value=\"customer\">Customer</option>\n        </select>\n        <!-- <input type=\"text\" class=\"form-control\" id=\"userRole\" formControlName=\"userRole\" /> -->\n        \n      </div>\n      <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"registrationForm.invalid\">Register</button>\n    </form>\n  </div>\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}