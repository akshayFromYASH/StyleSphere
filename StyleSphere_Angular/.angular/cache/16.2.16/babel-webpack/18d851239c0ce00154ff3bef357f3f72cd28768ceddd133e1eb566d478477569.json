{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../Services/user.service\";\nimport * as i3 from \"@angular/router\";\nexport class UserRegistrationComponent {\n  constructor(form, _service, Route) {\n    this.form = form;\n    this._service = _service;\n    this.Route = Route;\n    this.registrationForm = new FormGroup({\n      userName: new FormControl('', [Validators.required, Validators.minLength(3)]),\n      email: new FormControl('', [Validators.required]),\n      password: new FormControl('', [Validators.required]),\n      phoneNumber: new FormControl('', [Validators.required]),\n      // status : new FormControl('',[Validators.required]),\n      userRole: new FormControl('', [Validators.required])\n    });\n  }\n  onSubmit() {\n    if (this.registrationForm.valid) {\n      let user = {\n        userName: this.registrationForm.value.userName,\n        email: this.registrationForm.value.email,\n        password: this.registrationForm.value.password,\n        phoneNumber: this.registrationForm.value.phoneNumber,\n        status: 'active',\n        userRole: this.registrationForm.value.userRole\n      };\n      console.log(\"new User Details\");\n      console.log(this.registrationForm);\n      this._service.UserRegistration(this.user).subscribe();\n      alert(\"User Registered Successfully !\");\n    }\n  }\n  static {\n    this.ɵfac = function UserRegistrationComponent_Factory(t) {\n      return new (t || UserRegistrationComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.UserService), i0.ɵɵdirectiveInject(i3.Router));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: UserRegistrationComponent,\n      selectors: [[\"app-user-registration\"]],\n      decls: 30,\n      vars: 2,\n      consts: [[1, \"container\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"userName\"], [\"type\", \"text\", \"id\", \"userName\", \"formControlName\", \"userName\", 1, \"form-control\"], [\"for\", \"email\"], [\"type\", \"email\", \"id\", \"email\", \"formControlName\", \"email\", 1, \"form-control\"], [\"for\", \"password\"], [\"type\", \"password\", \"id\", \"password\", \"formControlName\", \"password\", 1, \"form-control\"], [\"for\", \"phoneNumber\"], [\"type\", \"text\", \"id\", \"phoneNumber\", \"formControlName\", \"phoneNumber\", 1, \"form-control\"], [\"for\", \"userRole\"], [\"name\", \"userRole\", \"id\", \"userRole\", \"formControlName\", \"userRole\"], [\"value\", \"seller\"], [\"value\", \"customer\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"]],\n      template: function UserRegistrationComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\");\n          i0.ɵɵtext(2, \"User Registration\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"form\", 1);\n          i0.ɵɵlistener(\"ngSubmit\", function UserRegistrationComponent_Template_form_ngSubmit_3_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(4, \"div\", 2)(5, \"label\", 3);\n          i0.ɵɵtext(6, \"Username:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(7, \"input\", 4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"div\", 2)(9, \"label\", 5);\n          i0.ɵɵtext(10, \"Email:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(11, \"input\", 6);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(12, \"div\", 2)(13, \"label\", 7);\n          i0.ɵɵtext(14, \"Password:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(15, \"input\", 8);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(16, \"div\", 2)(17, \"label\", 9);\n          i0.ɵɵtext(18, \"Phone Number:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(19, \"input\", 10);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(20, \"div\", 2)(21, \"label\", 11);\n          i0.ɵɵtext(22, \"User Role:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(23, \"select\", 12)(24, \"option\", 13);\n          i0.ɵɵtext(25, \"Seller\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(26, \"option\", 14);\n          i0.ɵɵtext(27, \"Customer\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(28, \"button\", 15);\n          i0.ɵɵtext(29, \"Register\");\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"formGroup\", ctx.registrationForm);\n          i0.ɵɵadvance(25);\n          i0.ɵɵproperty(\"disabled\", ctx.registrationForm.invalid);\n        }\n      },\n      dependencies: [i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n      styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["FormControl","FormGroup","Validators","UserRegistrationComponent","constructor","form","_service","Route","registrationForm","userName","required","minLength","email","password","phoneNumber","userRole","onSubmit","valid","user","value","status","console","log","UserRegistration","subscribe","alert","i0","ɵɵdirectiveInject","i1","FormBuilder","i2","UserService","i3","Router","selectors","decls","vars","consts","template","UserRegistrationComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","UserRegistrationComponent_Template_form_ngSubmit_3_listener","ɵɵelement","ɵɵadvance","ɵɵproperty","invalid"],"sources":["D:\\StyleShpere\\StyleSphere_Angular\\src\\app\\user-registration\\user-registration.component.ts","D:\\StyleShpere\\StyleSphere_Angular\\src\\app\\user-registration\\user-registration.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { User } from '../Models/User';\nimport { UserService } from '../Services/user.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-user-registration',\n  templateUrl: './user-registration.component.html',\n  styleUrls: ['./user-registration.component.css']\n})\nexport class UserRegistrationComponent {\n\n  user:User;\n  constructor(private form:FormBuilder,private _service:UserService,private Route:Router){}\n\n  registrationForm = new FormGroup({\n    userName: new FormControl('',[Validators.required,Validators.minLength(3)]),\n    email : new FormControl('',[Validators.required]),\n    password: new FormControl('',[Validators.required]),\n    phoneNumber: new FormControl('',[Validators.required]),\n    // status : new FormControl('',[Validators.required]),\n    userRole:new FormControl('',[Validators.required])\n  })\n\n  onSubmit(){\n    if(this.registrationForm.valid){\n      let user={\n        userName: this.registrationForm.value.userName as string,\n        email:this.registrationForm.value.email as string,\n        password:this.registrationForm.value.password as string,\n        phoneNumber:this.registrationForm.value.phoneNumber as string,\n        status: 'active',\n        userRole:this.registrationForm.value.userRole as string,\n      }\n      console.log(\"new User Details\")\n      console.log(this.registrationForm);\n      this._service.UserRegistration(this.user).subscribe();\n      alert(\"User Registered Successfully !\")\n    }\n  }\n}\n","<div class=\"container\">\n  <h1>User Registration</h1>\n    <form [formGroup]=\"registrationForm\" (ngSubmit)=\"onSubmit()\">\n      <div class=\"form-group\">\n        <label for=\"userName\">Username:</label>\n        <input type=\"text\" class=\"form-control\" id=\"userName\" formControlName=\"userName\" />\n        <!-- <div *ngIf=\"registrationForm.get('userName').invalid && (registrationForm.get('userName').dirty || registrationForm.get('userName').touched)\" class=\"alert alert-danger\">\n          Username is required.\n        </div> -->\n      </div>\n      <div class=\"form-group\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" class=\"form-control\" id=\"email\" formControlName=\"email\" />\n        <!-- <div *ngIf=\"registrationForm.get('email').invalid && (registrationForm.get('email').dirty || registrationForm.get('email').touched)\" class=\"alert alert-danger\">\n          <div *ngIf=\"registrationForm.get('email').errors.required\">Email is required.</div>\n          <div *ngIf=\"registrationForm.get('email').errors.email\">Invalid email format.</div>\n        </div> -->\n      </div>\n      <div class=\"form-group\">\n        <label for=\"password\">Password:</label>\n        <input type=\"password\" class=\"form-control\" id=\"password\" formControlName=\"password\" />\n        <!-- <div *ngIf=\"registrationForm.get('password').invalid && (registrationForm.get('password').dirty || registrationForm.get('password').touched)\" class=\"alert alert-danger\">\n          <div *ngIf=\"registrationForm.get('password').errors.required\">Password is required.</div>\n          <div *ngIf=\"registrationForm.get('password').errors.minlength\">Password must be at least 6 characters long.</div>\n        </div> -->\n      </div>\n      <div class=\"form-group\">\n        <label for=\"phoneNumber\">Phone Number:</label>\n        <input type=\"text\" class=\"form-control\" id=\"phoneNumber\" formControlName=\"phoneNumber\" />\n        <!-- <div *ngIf=\"registrationForm.get('phoneNumber').invalid && (registrationForm.get('phoneNumber').dirty || registrationForm.get('phoneNumber').touched)\" class=\"alert alert-danger\">\n          <div *ngIf=\"registrationForm.get('phoneNumber').errors.required\">Phone Number is required.</div>\n          <div *ngIf=\"registrationForm.get('phoneNumber').errors.pattern\">Invalid phone number format.</div>\n        </div> -->\n      </div>\n      <!-- <div class=\"form-group\">\n        <label for=\"status\">Status:</label>\n        <input type=\"text\" class=\"form-control\" id=\"status\" formControlName=\"status\" />\n        <div *ngIf=\"registrationForm.get('status').invalid && (registrationForm.get('status').dirty || registrationForm.get('status').touched)\" class=\"alert alert-danger\">\n          Status is required.\n        </div>\n      </div> -->\n      <div class=\"form-group\">\n        <label for=\"userRole\">User Role:</label>\n        <select name=\"userRole\" id=\"userRole\" formControlName=\"userRole\">\n          <option value=\"seller\">Seller</option>\n          <option value=\"customer\">Customer</option>\n        </select>\n        <!-- <input type=\"text\" class=\"form-control\" id=\"userRole\" formControlName=\"userRole\" /> -->\n        \n      </div>\n      <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"registrationForm.invalid\">Register</button>\n    </form>\n  </div>\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}