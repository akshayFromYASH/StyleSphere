{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../Services/auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nexport class UserloginComponent {\n  constructor(_service, router) {\n    this._service = _service;\n    this.router = router;\n    this.currentuser = {\n      userId: 0,\n      userName: '',\n      email: '',\n      password: '',\n      phoneNumber: '',\n      status: '',\n      userRole: ''\n    };\n    this.isLoggedin = 'true';\n    this.Role = '';\n  } // Injects the authentication and router servie\n  onSubmit(form) {\n    let loginuser = form.value; // Extracts the form data.\n    this._service.Login(loginuser).subscribe(res => {\n      if (res.status == 200) {\n        // localstorage ==> to hold unencrypted data\n        localStorage.setItem('logged', this.isLoggedin); // Stores the login status in local storage.\n        // sessionStorage ==> to hold encrypted data\n        sessionStorage.setItem('loginToken', res.body.token); // Stores the token in session storage\n        // printing token on console\n        console.log(\"Token is .......\");\n        console.log(res.body.token);\n        sessionStorage.setItem('userrole', res.body.userRole);\n        this.Role = sessionStorage.getItem(\"userrole\") || '';\n        console.log(\"From UserLoginComponent\" + this.Role);\n        //   if(this.isLoggedin === 'true'){\n        //     alert(\"login Success\");\n        //     this.router.navigate(['app'])\n        //   }\n        //   else\n        //    alert(\"Error Logging In\")\n      }\n    }, err => {\n      alert(\"There was a problem logging \" + err.message);\n    });\n  }\n  static {\n    this.ɵfac = function UserloginComponent_Factory(t) {\n      return new (t || UserloginComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.Router));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: UserloginComponent,\n      selectors: [[\"app-userlogin\"]],\n      decls: 19,\n      vars: 0,\n      consts: [[1, \"text-success\", \"text-center\"], [1, \"container\", \"mt-5\"], [1, \"row\", \"justify-content-center\"], [1, \"col-md-6\"], [1, \"card\"], [1, \"card-body\"], [3, \"ngSubmit\"], [\"form\", \"ngForm\"], [1, \"form-group\"], [\"for\", \"email\"], [\"type\", \"email\", \"name\", \"email\", \"placeholder\", \"Email\", \"required\", \"\", \"ngModel\", \"\", 1, \"form-control\"], [\"for\", \"password\"], [\"type\", \"password\", \"name\", \"password\", \"placeholder\", \"Password\", \"ngModel\", \"\", \"required\", \"\", 1, \"form-control\"], [1, \"btn\", \"btn-primary\"]],\n      template: function UserloginComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          const _r1 = i0.ɵɵgetCurrentView();\n          i0.ɵɵelementStart(0, \"h1\", 0);\n          i0.ɵɵtext(1, \" LogIn\\n\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"div\", 1)(3, \"div\", 2)(4, \"div\", 3)(5, \"div\", 4)(6, \"div\", 5)(7, \"form\", 6, 7);\n          i0.ɵɵlistener(\"ngSubmit\", function UserloginComponent_Template_form_ngSubmit_7_listener() {\n            i0.ɵɵrestoreView(_r1);\n            const _r0 = i0.ɵɵreference(8);\n            return i0.ɵɵresetView(ctx.onSubmit(_r0));\n          });\n          i0.ɵɵelementStart(9, \"div\", 8)(10, \"label\", 9);\n          i0.ɵɵtext(11, \" Email \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(12, \"input\", 10);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"div\", 8)(14, \"label\", 11);\n          i0.ɵɵtext(15, \" Password \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(16, \"input\", 12);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(17, \"button\", 13);\n          i0.ɵɵtext(18, \" Login \");\n          i0.ɵɵelementEnd()()()()()()();\n        }\n      },\n      dependencies: [i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.NgModel, i3.NgForm],\n      styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["UserloginComponent","constructor","_service","router","currentuser","userId","userName","email","password","phoneNumber","status","userRole","isLoggedin","Role","onSubmit","form","loginuser","value","Login","subscribe","res","localStorage","setItem","sessionStorage","body","token","console","log","getItem","err","alert","message","i0","ɵɵdirectiveInject","i1","AuthService","i2","Router","selectors","decls","vars","consts","template","UserloginComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","UserloginComponent_Template_form_ngSubmit_7_listener","ɵɵrestoreView","_r1","_r0","ɵɵreference","ɵɵresetView","ɵɵelement"],"sources":["D:\\StyleShpere\\StyleSphere_Angular\\src\\app\\userlogin\\userlogin.component.ts","D:\\StyleShpere\\StyleSphere_Angular\\src\\app\\userlogin\\userlogin.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { User } from '../Models/User';\nimport { AuthService } from '../Services/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-userlogin',  // The HTML tag that represents this component.\n  templateUrl: './userlogin.component.html',\n  styleUrls: ['./userlogin.component.css']\n})\nexport class UserloginComponent {\n  currentuser: User = {    // Initializes an empty User object to hold form data.\n    userId: 0,\n    userName: '',\n    email: '',\n    password: '',\n    phoneNumber: '',\n    status: '',\n    userRole: ''\n  }\n  constructor(private _service: AuthService, private router: Router) { }     // Injects the authentication and router servie\n\n  isLoggedin: string = 'true';\n\n  Role: string = ''\n\n  onSubmit(form: any) {\n    let loginuser = form.value;                               // Extracts the form data.\n    this._service.Login(loginuser).subscribe((res: any) => {\n      if (res.status == 200) {\n\n        // localstorage ==> to hold unencrypted data\n        localStorage.setItem('logged', this.isLoggedin);       // Stores the login status in local storage.\n        // sessionStorage ==> to hold encrypted data\n        sessionStorage.setItem('loginToken', res.body.token)   // Stores the token in session storage\n\n        // printing token on console\n        console.log(\"Token is .......\");\n        console.log(res.body.token);\n\n        sessionStorage.setItem('userrole', res.body.userRole)\n\n        this.Role = sessionStorage.getItem(\"userrole\") || ''\n\n        console.log(\"From UserLoginComponent\" + this.Role);\n        //   if(this.isLoggedin === 'true'){\n        //     alert(\"login Success\");\n        //     this.router.navigate(['app'])\n        //   }\n        //   else\n        //    alert(\"Error Logging In\")\n        }\n      }, (err: any) => {\n        alert(\"There was a problem logging \" + err.message);\n      });\n  }\n}\n","<h1 class=\"text-success text-center\">\n     LogIn\n</h1>\n<div class=\"container mt-5\">\n    <div class=\"row justify-content-center\">\n        <div class=\"col-md-6\">\n            <div class=\"card\">\n                <div class=\"card-body\">\n                    <form #form=\"ngForm\" (ngSubmit)=\"onSubmit(form)\">\n                        <div class=\"form-group\">\n                            <label for=\"email\">\n                                Email\n                            </label>\n                            <input type=\"email\"\n                                   class=\"form-control\"\n                                   name=\"email\"\n                                   placeholder=\"Email\" required  ngModel/>\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"password\">\n                                Password\n                            </label>\n                            <input type=\"password\"\n                                   class=\"form-control\"\n                                   name=\"password\"\n                                   placeholder=\"Password\" ngModel\n                                required />\n                        </div>\n                        <button class=\"btn btn-primary\">\n                            Login\n                        </button>\n                    </form>\n                                     \n                </div>\n            </div>\n        </div>\n    </div>\n</div>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}