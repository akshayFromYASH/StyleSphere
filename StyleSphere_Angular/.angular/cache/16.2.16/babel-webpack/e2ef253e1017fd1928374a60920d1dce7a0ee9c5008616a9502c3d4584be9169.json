{"ast":null,"code":"// import { Component } from '@angular/core';\n// import { User } from '../Models/User';\nimport { __decorate } from \"tslib\";\n// @Component({\n//   selector: 'app-userregister',\n//   templateUrl: './userregister.component.html',\n//   styleUrls: ['./userregister.component.css']\n// })\n// export class UserregisterComponent {\n//   user:User;\n//   ngOnInit(){\n//     this.user={\n//       \"userId\": 0,\n//   \"userName\": \"string\",\n//   \"email\": \"string\",\n//   \"password\": \"string\",\n//   \"phoneNumber\": \"string\",\n//   \"status\": \"string\",\n//   \"userRole\": \"string\"\n//     }\n//     console.log(this.user);\n//   }\n// }\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let RegisterComponent = class RegisterComponent {\n  constructor(fb, service, router) {\n    this.fb = fb;\n    this.service = service;\n    this.router = router;\n    this.isLoading = false;\n    this.showPassword = false;\n    this.showConfirmPassword = false;\n  }\n  ngOnInit() {\n    this.registrationForm = this.fb.group({\n      userId: [0],\n      userName: ['', [Validators.required, Validators.minLength(3)]],\n      email: ['', [Validators.required, Validators.email]],\n      phoneNumber: ['', [Validators.required, Validators.maxLength(10)]],\n      status: ['', Validators.required],\n      userRole: ['', Validators.required],\n      password: ['', [Validators.required, Validators.minLength(8)]],\n      confirmPassword: ['', [Validators.required]]\n    });\n  }\n  // passwordMatchValidator(formGroup: FormGroup): any {\n  //   const password = formGroup.get('password');\n  //   const confirmPassword = formGroup.get('confirmPassword');\n  //   return password && confirmPassword && password.value === confirmPassword.value ? null : { 'mismatch': true };\n  // }\n  isFieldInvalid(field) {\n    const control = this.registrationForm.get(field);\n    return !!control && control.invalid && (control.dirty || control.touched);\n  }\n  onSubmit() {\n    if (this.registrationForm.valid) {\n      this.isLoading = true;\n      const formValues = this.registrationForm.value;\n      this.user = {\n        userId: formValues.userId,\n        userName: formValues.userName,\n        email: formValues.email,\n        phoneNumber: formValues.phoneNumber,\n        status: formValues.status,\n        userRole: formValues.userRole,\n        password: formValues.password\n      };\n      this.service.UserRegistration(this.user).subscribe(response => {\n        console.log('Registration successful', response);\n        this.isLoading = false;\n        this.router.navigate(['userLogin']);\n      }, error => {\n        console.error('Registration failed', error);\n        this.isLoading = false;\n      });\n    }\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);","map":{"version":3,"names":["Component","Validators","RegisterComponent","constructor","fb","service","router","isLoading","showPassword","showConfirmPassword","ngOnInit","registrationForm","group","userId","userName","required","minLength","email","phoneNumber","maxLength","status","userRole","password","confirmPassword","isFieldInvalid","field","control","get","invalid","dirty","touched","onSubmit","valid","formValues","value","user","UserRegistration","subscribe","response","console","log","navigate","error","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\StyleShpere\\StyleSphere_Angular\\src\\app\\userregister\\userregister.component.ts"],"sourcesContent":["// import { Component } from '@angular/core';\n// import { User } from '../Models/User';\n\n\n// @Component({\n//   selector: 'app-userregister',\n//   templateUrl: './userregister.component.html',\n//   styleUrls: ['./userregister.component.css']\n// })\n// export class UserregisterComponent {\n//   user:User;\n\n//   ngOnInit(){\n//     this.user={\n//       \"userId\": 0,\n//   \"userName\": \"string\",\n//   \"email\": \"string\",\n//   \"password\": \"string\",\n//   \"phoneNumber\": \"string\",\n//   \"status\": \"string\",\n//   \"userRole\": \"string\"\n//     }\n//     console.log(this.user);\n//   }\n// }\n\n\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { User } from '../Models/User';\nimport { AuthService } from '../Services/auth.service';\nimport { UserService } from '../Services/user.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n  registrationForm: FormGroup;\n  user: User;\n  isLoading = false;\n  showPassword = false;\n  showConfirmPassword = false;\n\n  constructor(private fb: FormBuilder, private service: UserService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.registrationForm = this.fb.group({\n      userId: [0],\n      userName: ['', [Validators.required, Validators.minLength(3)]],\n      email: ['', [Validators.required, Validators.email]],\n      phoneNumber: ['', [Validators.required, Validators.maxLength(10)]],\n      status: ['', Validators.required],\n      userRole: ['', Validators.required],\n      password: ['', [Validators.required, Validators.minLength(8)]],\n      confirmPassword: ['', [Validators.required]]\n    })\n  }\n\n  // passwordMatchValidator(formGroup: FormGroup): any {\n  //   const password = formGroup.get('password');\n  //   const confirmPassword = formGroup.get('confirmPassword');\n  //   return password && confirmPassword && password.value === confirmPassword.value ? null : { 'mismatch': true };\n  // }\n\n  isFieldInvalid(field: string): boolean {\n    const control = this.registrationForm.get(field);\n    return !!control && control.invalid && (control.dirty || control.touched);\n  }\n\n  onSubmit(): void {\n    if (this.registrationForm.valid) {\n      this.isLoading = true;\n      const formValues = this.registrationForm.value;\n      this.user = {\n        userId:formValues.userId,\n        userName: formValues.userName,\n        email: formValues.email,\n        phoneNumber: formValues.phoneNumber,\n        status: formValues.status,\n        userRole: formValues.userRole,\n        password: formValues.password,\n      };\n\n      this.service.UserRegistration(this.user).subscribe(\n        response => {\n          console.log('Registration successful', response);\n          this.isLoading = false;\n          this.router.navigate(['userLogin']);\n        },\n        error => {\n          console.error('Registration failed', error);\n          this.isLoading = false;\n        }\n      );\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}